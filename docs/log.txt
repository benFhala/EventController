whats new in 1.3- NEW! - API Change remove methods (remove, removeObjEvents,removeCluster) return an Array instead of a Boolean  the array lists out all of the events that have been removed from the class (the desposed events)  you can now store that data and restart the events by sending the Array back.- NEW! - a new method introduced into the LEC  removeEvent - it is a much less procssor intencive and  is used internally but can be used when you want to remove a single event as well.- NEW! - a new method introduced into the LEC addGroup - it works in tandem with the fact that now we return  Array's with information on what was removed enabling you to create/pause and release events.  the storage of paused events are in the hands of the developer by saving the Array you can then  send it back when you want to reactivate it or if you want to have custom tracing of what you removed  you can loop through the extracted data.- events are tested to be IEventDispatcher and  not EventDispatcher to enable custom EventDispachers to be used- NEW! - the global LEC is exposed so experienced users can work directly with it - LEC.getGlobal();  cutting the need for the EC/EventController classes and improving performance as there  is less work with static functions recommended to create a local variable and append to it the data:   example:  var global:LEC = LEC.getGlobal();  and working with the global variable cutting down the processing involved. - NEW! debugger extracted into its own class so now on if you want to debug you need to turn the switch on  calling the plug method to include a new log:  LEC.plug(ClassicLog); //will include the same old and sweet debugger if you prefer working with a debugger tool  you can send it to the plug look at how the DelegateLog works for information on how to work with your fav debugging tool- NEW! implmentaion samples for debugging with Alcon,de Monster Debugger and ArthropodLog.- when working with EventController it does not import the EC anymore and is stand alone.  cutting down 87 bits that wheren't needed ;) but improved performence when working directly with  the Eventcontroller.- whenever possible static methods where localized to the objects to cut down on performance.- so we hear you and where conflicted some of you wanted to work with the class but needed  a way to be more strongly typed so we decided the public API's for EventController/EC should remain  the same as we think they are going to be used most by the small project developers but the real hard  core power hub is at LEC so we converted all the functions we can to be more strictly typed  besides the multi  function ones remove/log but if you need/want to work hard typed you can work directly with the remove counter parts   LEC.add(obj:IEventDispatcher,...  LEC.removeObjEvents(obj:IEventDispatcher)   to enable these users to get compiler errors. in other words:   EC.add({},... - would generate a run time error  LEC.getGlobal().add({},... - would generate a compiler error  as many functions have multiple usages they can not be hard typed such as remove and log.- and the best news we are still under 2k if you work directly with the LEC or 2.1k if working with EC